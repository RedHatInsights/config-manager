// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enable or disable automatic state management of remote hosts
	// (POST /manage)
	PostManage(ctx echo.Context) error
	// Get archive of state changes for requesting account
	// (GET /states)
	GetStates(ctx echo.Context, params GetStatesParams) error
	// Update and roll out configuration state for requesting account
	// (POST /states)
	UpdateStates(ctx echo.Context) error
	// Get the current state for requesting account
	// (GET /states/current)
	GetCurrentState(ctx echo.Context) error
	// Get a preview of the playbook built from the provided state map
	// (POST /states/preview)
	GetPlaybookPreview(ctx echo.Context) error
	// Get single state change for requesting account
	// (GET /states/{id})
	GetStateById(ctx echo.Context, id StateIDParam) error
	// Get ansible playbook for current state configuration
	// (GET /states/{id}/playbook)
	GetPlaybookById(ctx echo.Context, id StateIDParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostManage converts echo context to params.
func (w *ServerInterfaceWrapper) PostManage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostManage(ctx)
	return err
}

// GetStates converts echo context to params.
func (w *ServerInterfaceWrapper) GetStates(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStates(ctx, params)
	return err
}

// UpdateStates converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStates(ctx)
	return err
}

// GetCurrentState converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentState(ctx)
	return err
}

// GetPlaybookPreview converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookPreview(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookPreview(ctx)
	return err
}

// GetStateById converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateById(ctx, id)
	return err
}

// GetPlaybookById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/manage", wrapper.PostManage)
	router.GET(baseURL+"/states", wrapper.GetStates)
	router.POST(baseURL+"/states", wrapper.UpdateStates)
	router.GET(baseURL+"/states/current", wrapper.GetCurrentState)
	router.POST(baseURL+"/states/preview", wrapper.GetPlaybookPreview)
	router.GET(baseURL+"/states/:id", wrapper.GetStateById)
	router.GET(baseURL+"/states/:id/playbook", wrapper.GetPlaybookById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYTXPbNhP+Kxi875Ex7bS58BYnmdRTZ6LW7inx2BCxFJESAAMsVWs8/O+dBSiSMilb",
	"dtNkehOJ/cKzz36Idzy3urYGDHqe3fFaOKEBwYWnc6UV0g8JPneqRmUNz/gHcat0o5lp9BIcswVz4JsK",
	"PUPLHGDjDE+4ItGvDbgNT7gRGnjGq2Aw4T4vQYtouRBNhTx7dZxwHQ3z7OUxPSkTn04Sjpua9JVBWIHj",
	"bZvwj0XhYSa6MyNVLhA8wxKYR+FQmRWrrVckQeHSQYiMOagEqjVQ5PSW0KgAgXlAklQImgwJZFpgXg6q",
	"e25oY1SzVxzf6Xj2ThfW4emGlOZse+vwernZMQ6GrH3iuQOBIK8F+R4eMuHz3RcEFr/qvXt0yqyicxQI",
	"Z28XRIEprJ5OmXB5SXApCQZVocBtcagFlkOoSvKEO/jaKAeSZ+gaGEf9fwcFz/j/0oF9aTz1aRcGbymm",
	"7iXpvM5z25iQcC1uz8GssOTZSQS1f5xcLNkqBruB487W4FBBMCsGsw9FtfXeJlzUdbW59ltzD2qRaHTc",
	"JgTKoXdPeCWWUD0mfx6ECKdDoukCaXuM7PIL5OFOo0Czu+3x0toKhKHzM6NQCbRudDwgfL6NdXLSmxRS",
	"hvIT1WIEfyEqD8m9jIQaVMLkcG1rMD4X9ZjpYMSyAuKXVD7+vJrJujJercrY1Z6o6kCDVILCfbp6O+b9",
	"pyGMZPZe95xdzaQmQPg61t23oO+oUzyidKk0eBS6fjJ51ZguD+kMvPrulB/j6qfA9rDutsHXo6kHBp0C",
	"3408kKxwVrN+Atzv70k3/mZsanE7Y3c8TafG7J7510fooHbgqU+bFdsdhcogKyyJkKc1veyczrrqxvvU",
	"12/dEI3HCQ/j8qCcbAk9ZEY4Jzbh2aKo5u4VDlhIDMFU2MbIB+Lem/Szt2S9sE5TDfCmCdNq0gYG+o+l",
	"pUB4gUrDVKUNzC/sNPY31hRqxbQwYgWOeXBrlQcLCiuYCPCEr8H5qHt8dHx0EhJegxG14hn/KbxKwswN",
	"cKdRMbDY+hlSXICRTBj2y+Xlgi0+XlwyDVhaGfce5RmZoofY45h1rOtxTDRotUCVfzbRi4aIvwNtEVhp",
	"PfojdlkCo8YHHtnSyg3TDf2KmxQZVliC+2xuaBe4IQc3ofvfHH0mflPphSZ4JnnGF9bjh3il2E7B46mV",
	"m1iYBiGWJk1i2vWUNekXTxe9Gy0Z96dYG3uzr63xscZfHh9Pofr4K4H989zRqZDs9xhNoJdvtBZuwzP+",
	"bj9sLG5O+7ELptIgFaJaxareReQ9xAXGh7QPS/qn+VobRNK4xLfJo4LdQn2AZLemtlfzeB6coUO7hI+1",
	"9bw8kczJTDtpsKTeGINjWnlPbTC0cDfovpqzf2YQnBEVuwC3BsfeOWfdPUa8B+y3ZVt0JMhLYVbgu94b",
	"nJBTMUznbfnuZv+PmtpOT4DnVsQhk3KC80VH3zr+DTIAMoymJbAmhDVd9dt/kRc72/w/osWzUxuzwYSR",
	"zNmqYrZBlocG3sScddnel+Wh3NO8ca6DZF/Zv4ki8cL/CWB/WL2Ff/ARrsNTUDtYK/hrPDsnOVhUYrO0",
	"9s9FJ/vDSrDxEGb2CgyFCEywLn5WdzE+oxoRbjFdG3m0EbqaHaLjFecbjMvQHPvIuy8y2wuwZaMqjMwI",
	"751dKwmyH6T1Tv7ulGwfHZunmzP55Mm580Hkuw27bwoy1VgFO9PnkJogTNOeUA+Auy2M74Lvj6Gp8Yr2",
	"uZ6dBN9uk9np/d13q9CoIgqNq3jGS8TaZ2maV7aRRw5kKfAotzoVtUqjhRfd+p+uabnfDbJ2VjZ5dJBs",
	"bR6o23/kDN/o2qv27wAAAP//9F59DfYVAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
