// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enable or disable automatic state management of remote hosts
	// (POST /manage)
	PostManage(ctx echo.Context) error
	// Get archive of state changes for requesting account
	// (GET /states)
	GetStates(ctx echo.Context, params GetStatesParams) error
	// Update and roll out configuration state for requesting account
	// (POST /states)
	UpdateStates(ctx echo.Context) error
	// Get the current state for requesting account
	// (GET /states/current)
	GetCurrentState(ctx echo.Context) error
	// Get a preview of the playbook built from the provided state map
	// (POST /states/preview)
	GetPlaybookPreview(ctx echo.Context) error
	// Get single state change for requesting account
	// (GET /states/{id})
	GetStateById(ctx echo.Context, id StateIDParam) error
	// Get ansible playbook for current state configuration
	// (GET /states/{id}/playbook)
	GetPlaybookById(ctx echo.Context, id StateIDParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostManage converts echo context to params.
func (w *ServerInterfaceWrapper) PostManage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostManage(ctx)
	return err
}

// GetStates converts echo context to params.
func (w *ServerInterfaceWrapper) GetStates(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStates(ctx, params)
	return err
}

// UpdateStates converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStates(ctx)
	return err
}

// GetCurrentState converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentState(ctx)
	return err
}

// GetPlaybookPreview converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookPreview(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookPreview(ctx)
	return err
}

// GetStateById converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateById(ctx, id)
	return err
}

// GetPlaybookById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/manage", wrapper.PostManage)
	router.GET(baseURL+"/states", wrapper.GetStates)
	router.POST(baseURL+"/states", wrapper.UpdateStates)
	router.GET(baseURL+"/states/current", wrapper.GetCurrentState)
	router.POST(baseURL+"/states/preview", wrapper.GetPlaybookPreview)
	router.GET(baseURL+"/states/:id", wrapper.GetStateById)
	router.GET(baseURL+"/states/:id/playbook", wrapper.GetPlaybookById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYX1PcOBL/KirdPToYcpcXv4VcKkctKdiFfUoo0Fg9Y2UtyWm1Z5mi/N23WvKMPYyB",
	"gWST2jfL6r+//mvfydLbxjtwFGRxJxuFygIBxtOpsYb4QUMo0TRkvJOF/KhujW2tcK2dAQo/FwihrSkI",
	"8gKBWnQyk4ZJv7aAK5lJpyzIQtZRYCZDWYFVSfJctTXJ4s1hJm0SLIvXh3wyLp2OMkmrhvmNI1gAyq7L",
	"5Nl8HmDCuhOnTakIgqAKRCCFZNxCND4YpmBz+SJaJhBqRWYJbDm/ZTRqIBABiCkNgWVBioRVVFYD6wMe",
	"+mTVpItjnw4nfbrwSMcrZpqSHTzS9Wy1JRwcS/skSwRFoK8V6x4OhQrl9gsGS15ttAdC4xZJOSmCk/+d",
	"cwrswhr4VigsK4bLaHBk5gZwjUOjqBpMNVpmEuFraxC0LAhbGFv9b4S5LOS/8iH78nQb8t4M2bFN/Uvm",
	"eVuWvnUx4FbdnoJbUCWLowTq5rjjWLZmjHJjjqNvAMlAFKsGsY9ZtdbeZVI1Tb26Dmtxj3IxaVLcZQzK",
	"vr5nslYzqJ+iP41EXSY9Lq6fFn+GiyR8L+N7u7sNpH72BcoIwciv4m59PfO+BuX4/sQZMoo8jq6HgJyu",
	"Xdu5SQZO3WyUKa1jHav6fBTHuaoDZPdCG4vZKFfCtW/AhVI145IBp2Y1cKJqE9Lj1UT6GBfMokrt8Zms",
	"CBa0UWzu89m7cQF9GszIJv26p+xqImgRwrepgL9HHYxazhNMl8ZCIGWbZ1eBGSfSYzxDxj27dr61GMa4",
	"hl1gN7Bu99O3o/EJjtBA6GcnaDFHb8VmlNwfFFk/RydkWnU7IXc8lneF+QcG6cZChAYhcMN3C7E9U40j",
	"MfdMwpqW/LJXOqmq3xN2df3aT+N0nck4d/eKyTqhh8goRLWKZ0+qnvIrXogYGIZp7lunH7H7waCnXjX3",
	"aLkGZNvGsbfTBob0H1NrRfCKjIVdli5m/tzv2v7Ou7lZCKucWgCKALg0ZZRgqIYdApnJJWBIvIcHhwdH",
	"MeANONUYWcj/xFdZHN4R7jwxxiz2YSIpLsBpoZz4/+XluTg/u7gUFqjyOi1QJggWxYfU44RH0fc4oVry",
	"VpEpP7ukxULCH8F6AlH5QOFAXFYguPFBIDHzeiVsy09pJWPBhirAz+6Gl4obVnATu//NwWfOby692ARP",
	"tCzkuQ/0MbmU2ikEOvZ6lQrTEaTS5JHOS6PxLv8S2NG70bZyf751qTeHxruQavz14eEuVGe/MNj/nbo6",
	"Vlr8lqyJ6RVaaxWuZCHfPwybSCvYw9hFUXmkilYtUlVvI/IB0iYUYtiHbf/TdK0NJHn6GuiyJwn7zXwP",
	"yn7f7a6m8dw7Qvt2iZBq62VxYpqjiXbSUsW9MRknrAmB22Bs4TjwvpmSf+II0KlaXAAuAcV7RI/3MuID",
	"0Gbt9vM+CcpKuQWEvvdGJaxUDdN5Xb7b0f+94bazSYCXVsQ+k3IH54s+fZv0PeUAdBxNMxBtNGv3m6H7",
	"G/Ni67Pgm9LixaFN0RDKaYG+roVvSZSxgbcpZn20H4ryUO552SL2kDxU9u8SSXL4HwHsT6u3+CsgwbV/",
	"CBqEpYE/x7NzJwbntVrNvP/jvKf9aSXYBogzewGOTQShRG+/aHobX1CNBLeUL50+WClbTw7R8YrzHcZl",
	"bI4by/tfO2sHxKw1NaXMiO/RL40GvRmkzVb87ozunhybx6sT/ezJufVn5YcNu+8KMtdYDVvTZ5+aYEzz",
	"TUI9Au66MH4Ivj8nTV0wvM9tspPh224yW72//wEWG1VCocVaFrIiakKR52XtW32AoCtFB6W3uWpMniS8",
	"6tf/fMnL/baRDXrdlklBtpa5J+/mb2n82ddddX8FAAD//yHVHis/FgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
