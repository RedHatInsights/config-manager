// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTY/bNhD9KwRbwBfFcpPsRbemaINFvxab9pQsgjE5splSpHY4cmMY+u8FKckfa9n1",
	"IrstUPRkSUO+eRy+4aM3Uvmq9g4dB1lsZFBLrCA93pAvjcX4WJOvkdhgCoBSvnH80ej4xusaZSEDk3EL",
	"2WYSFJsV7oXm3lsEF2MxmTXg1Kk4ITDqj8Cj0CnsaTR2go1xwSyW3eKO8zmocHSap8Wp9RFWqA2w8W4U",
	"tc2GT37+CRXLtk08Sp9GG441lcq70ixeVOBggSQzuUIKxjtZyJeJQI0OaiML+Wo6m85kJmvgZUqY1xbW",
	"c+//SG8LTLXSGBSZmjuI77wLTI3iIMBpQcgNuSBAfOuCmVsUA4QIjWGIX9iLjlNDKEAsfWBRehK8REF4",
	"32Bg1KLuRDGViSGlKlxrWci3yDc9ZuJKUCEjBVm830gTOd03SGs51Fz2SLHKsab3jSHUsmBqMOtlOFL+",
	"9i4ODrV3oRPjy9ks/ijvGF2qBNS1NSoxyz+/WENld8LeQ9zfnMPi/fpj3IDXR8CMnznWPq5mc4biEeAb",
	"0OK2K2GH/PqpkH/xLH7wjdMR9+rpGF87RnJgxTukFZL4nshTknZoqgpoLQt5i0wGVyjAHcvqpHISSN6/",
	"nBbwDlzUsDAungoCiGAtfDlghW0ao9GxKU0c1J1OU/HbEsXvtz+JpDuxU6SYWFMZnqTOmPiyDMgTocCJ",
	"OYomoI6tMCTtFxEay6GD1FhCY1mswDYYyQxwJoir2akxQxoTxGy8eYaKXNQ8KaXc75M+pSyuZtvzxzjG",
	"eLi0bTYO07GSI/22m/q4hvsU/AOtHXpH2puxPFm/ptFQz3M01m9ODBrGKj18TVjKQn6V78wt750tH2xt",
	"d0wnWaV3z2BHi7B/Qr3vx2X9YrLtbmzLOXC6y/790+YfPhXeIgsQ1gSOugdrt80aydQ+jLlVcv3Ujz59",
	"A2vXIt0j0nfh8M/TztPNHra12ykM/Mbr9RcI9UtuMefvHBfcH/bF1hM5yLqX4gHeuOIO7bU96uhvHlWo",
	"i7rrWD3dPiWnenXkgM+SMbrjz14nX/hPNdnQMPuNcWis+cbo9hJ3DTUqUxo1wOxb6Xyd7G9i9ETE2+fO",
	"RM8a73WZQgkZbG+CH6RqiNDxBxlNMPnsADKSIEuBKl5CCRU63vEL8Tqb6GthXGAEfc5RTxhqTLczwme9",
	"hD6Znv+/mD7Cgh4Ku0MLaVqng4asLGQOtckP/43lq/gX7GHTvGNYRDV105bMdSjyOHuqvAve4jTEEVNC",
	"vQSeKl9dDH1DXjcqvZzD/3vku/avAAAA//8yLJSv0Q8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
