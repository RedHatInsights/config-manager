// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYTXPbNhD9KztoZ3RhTNWxL7w1aZt6+uVxk5Pj8UDESkIKAjSwUKN69N87APhpUY6T",
	"2J5OTxYI8O3y7b7dhW9ZaaraaNTkWHHLLLraaIdxcTKfhz+l0YSawk/Cj5TXiksdVq5cY8Xj822NrGCO",
	"rNQrttvtMibQlVbWJI1mBXvFBVzgjUdHbJexk/nJYyH/bgh+Ml6LgHv6eB6faUKruYI/0W7Qwo/WGsvC",
	"uQQSGTq3ZikVhp+1NTVakok6XpbGa7qWIqzGyBco4GdO0JwB7asFWpbd9SljvCS5wSmEyhDC2jiC0uil",
	"XHnLwx6g5guFAhxxwh5yYYxCrgNmiLeSXJeHcceQAco7WBoL1mst9QpedxggOHEojVJYRpBJkxY5objm",
	"tG/yrawQzBLqxCTEsyOgno64Z+w+yDsXQpWAaI1jMDNJ7VRgmmiC1/LGI0iBmiRtYcOVx0kQ7eRqnZTz",
	"ZUyeNQgP4jF84r6pH9rVBiGSEPAHLEw5buzq3tQ0dsW1/Ce5/WkeLFYoZDz9FVxc9ChQK75dGPOXmyBi",
	"1z0yiw9YUlKv1EsThS0pCJIlcy8qrvkqqmuD1iWHjiMFNWpeS1awl0fzoznLWM1pHd3Pe+vFLVvhRNq+",
	"NtqR9SU54FqARfJWO+DwvXZyobD7AHBeUtAkkOkoQOBJvG2obCqNKNqgHbHoYSLrTLCCvUE6bzCjr5ZX",
	"SGgdKy5vWahu7Maj3bI2TViDFOIcInTjpUXBCrIes3sK4VU2bgLHeyWV17WSZfQs//hiyys1WVqHwRmT",
	"98cvqQdE4G8tLlnBvsn7RpR3DuThUN8vPnX2ZNAD7j8bDsVa7quK223MUrISNwhc7wfxYJwiSN4sDqdL",
	"Dw41X0kdyiFwa/l2UPtcZyYpbinDodQkjuDtGuHdxa8Qowx9/GGmZCVpFvNwZpZLhzSDkmtYIHiHIiRe",
	"a7T5COcVuQQpcMm9oqTt4EwLJx2czg+dac1IB/PpVG0Z2UvVBiwotGsLRWCLZZNp7Iyl60V40GcYal+x",
	"4nLYWIZdpuAR7S7+1V7l2mXT0okUjCx2Xp/OOxSpCUNpOQiTWGITautf/Ty5fXDmzhwzHjtirkzZyZpv",
	"mtxq/Jzca5IlbErCyh2SVjMU5e1E1BfpmOZxbYirSRKG9emyOZc1H5N10ejobH26yp6i1nxh/XiDBByU",
	"dBQUwpXqZB1Aa+OmukjM0KhcE59xpbYQp774HDT+fbgjpLfPuy7fFKdXRmy/IoX+JzPnM49mzz4BDQXT",
	"hGzE84CBO95Nq2Y8IOz2qtJ3n5VSD6oQ+2JNGR1vci/3bohPYjHcHn8zIvbaZyoUreiH4h6PEfmtFLuH",
	"zBKuxlIuZdldeAaDw2Ibm/1MihmEybYfGe4dM87SDSoic9W0/Pes9NaipvcstPw4VbQgEwayuFGFSmGx",
	"RE29fy6MytF9AVI7Qi7umx8OTLrBXN9mn3TAfbRM+08Ovalp3U2j5L6L//dIrHurWMFyXst8fK/KN8ds",
	"d7X7NwAA///o5fHsRxIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
