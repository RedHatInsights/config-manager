// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY32/bNhD+Vw7cAL+okZcmL3pbi60L9qvIuqc0CM7SyWZHkQp59OoF/t8HkrJkx7Kb",
	"tkkw7CmWePruePfdx2PuRGma1mjS7ERxJyy51mhH8eFsOg1/SqOZNIefTB85bxVKHZ5cuaAG4/tVS6IQ",
	"jq3Uc7FerzNRkSutbFkaLQrxCiu4pFtPjsU6E2fTs8dC/s0w/Gi8rgLu+eNFfKGZrEYFf5BdkoUfrDVW",
	"BLsEEjP01ppaKgo/W2tasixT6rAsjdd8I6vwtIt8SRX8hAydDWjfzMiK7H5MmcCS5ZLGEBrDBAvjGEqj",
	"azn3FsMakMaZogocI9MAOTNGEeqAGeqtJOryMO4uZIDyDmpjwXqtpZ7D6x4DKmSE0ihFZQQZdWkJmaob",
	"5H2X72RDYGpoUyYh2u4ADekYS2ZXAfBa3noCWZFmyStYovI0CqKdnC8S279s9xcdwoP2buz8KAmMnaOW",
	"/yRnn47eUkOVjNZfsYPLAQVahauZMX+5kfDX/Ssz+0Alpz6RujaxhSQH6ovk7kWDGueRx0uyLgV0GlPQ",
	"ksZWikK8PJmeTEUmWuRFDD8fvBd3Yk4jBHlttGPrS3aAugJL7K12gPC9dnKmqN8AOC85sB/Y9CkgwNQm",
	"Yfu8ILBJhKjaMO5ExAhTsi4qUYg3xG87zBirxYaYrBPF1Z0IOiJuPdmVyITGJiSgQwp1DhW69dJSJQq2",
	"nrIjknOd7crt6Z54YdsqWcbI8o8vVtioURHbLs5u8n7/OaltBP7WUi0K8U0+SH7eB5AHo0GZP2V7tqW2",
	"x22DUVRN3zRoV5GlbCUtCVDvF/FgnSJI3j0cpssADi3OpQ7CA2gtrrZUxvVuUsfVMhglOT6BdwuCPy9/",
	"gVhlGOoPEyUbyZPIw4mpa0c8gRI1zAi8oyoQb+O024Tzil2CrKhGrzj1dghmAycdnE8P2WzcSAfTcapu",
	"MvIgqjpj+WYWXgws6pyGTu6FughZFZkg7RtRXG1L+LaeFxit7n93vadc62w8npiC8WjOpz2K1ExBWg7C",
	"pCyJkW4bPv28dvvgzL2JYfeAj1wZ85N1expd6uIcXevIEhYlU+MOtVY3fuSb2WMQ6Ujz+GwY1WgStvXp",
	"qrPLus1kfTX6dG5ius6eQmu+UD/eEAOCko5Dh6BSfVsH0Na4sVMkMjR2ronvUKkVxPkqvgdNfx8+EdLX",
	"m4SnHJLjV6ZafQWF/ifT3TMPVM8+AW03TFeynTxvZeBedONdszsgrPdU6bvPotSDFGK/WROj453p5d5d",
	"7Ek8hnvar6aKZ+0zCcWm6bebe3eMyO9ktX7ILOFaKmUty/6esjU4zFbxsJ/IagJhsh1GhqNjxkUdlyIy",
	"qu7Ify9Kby1pfi/CkR+nig3IiIMsLjRBKSyVpHmIz4VROYZfgdSOCatj88OB8SG4G47ZJx1wH41p/8mh",
	"Nx1a92mUwnfxPwwp694qUYgcW5nv3qvy5alYX6//DQAA///rNexysREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
