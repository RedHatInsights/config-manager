// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY32/bNhD+Vw7cAL+okdemL3pbi60L9qvIuqc0CM7SyWZHkQp59OoF/t8HkrJkxXKa",
	"tkkw7CmWePruePfdx2NuRGma1mjS7ERxIyy51mhH8eF0Pg9/SqOZNIefTB85bxVKHZ5cuaIG4/tNS6IQ",
	"jq3US7HdbjNRkSutbFkaLQrxCis4p2tPjsU2E6fz04dC/s0w/Gi8rgLuy4eL+EwzWY0K/iC7Jgs/WGus",
	"CHYJJGborTW1VBR+tta0ZFmm1GFZGq/5SlbhaYx8ThX8hAydDWjfLMiK7HZMmcCS5ZqmEBrDBCvjGEqj",
	"a7n0FsMakMaFogocI9MAuTBGEeqAGeqtJOryOO4YMkB5B7WxYL3WUi/hdY8BFTJCaZSiMoJMurSETNUV",
	"8qHLd7IhMDW0KZMQbUdAQzqmktlVALyW155AVqRZ8gbWqDxNgmgnl6vE9i/b/VmHcK+9G7u8kwTGLlHL",
	"f5KzT0dvqaFKRuuv2MH5gAKtws3CmL/cRPjb/pVZfKCSU59IXZvYQpID9UVy96xBjcvI4zVZlwJ6HlPQ",
	"ksZWikK8OJmfzEUmWuRVDD8fvBc3YkkTBHlttGPrS3aAugJL7K12gPC9dnKhqN8AOC85sB/Y9CkgwNQm",
	"Yfu8IrBJhKjaMe5ExAhTss4qUYg3xG87zBirxYaYrBPFxY0IOiKuPdmNyITGJiSgQwp1DhW69tJSJQq2",
	"nrI7JOcyG8vt8wPxwrZVsoyR5R+fbbBRkyK2X5xx8n7/OaltBP7WUi0K8U0+SH7eB5AHo0GZP2V7uqe2",
	"d9sGo6iavmnQbiJL2UpaE6A+LOLROkWQvHs4TpcBHFpcSh2EB9Ba3OypjOvdpI6rZTBKcnwC71YEf57/",
	"ArHKMNQfZko2kmeRhzNT1454BiVqWBB4R1Ug3s5ptwnnFbsEWVGNXnHq7RDMDk46eDk/ZrNzIx3Mp6m6",
	"y8gBVTuw0KG9ABchWyKbpLEzlq8W4cXAMNK+EcXFvoTv63mBEe02/uWBcm2z6daJKRh57KN+Oe9RpGYK",
	"0nIUJmVJTHTb8OnntdsHZ25NDOMDPnJlyk/W7WlyqYtzcq0jS1iUTI071lrd+JHvZo9BpCPN47NhVJNJ",
	"2Neni84u6zaT9dXo07mL6TJ7DK35Qv14QwwISjoOHYJK9W0dQFvjpk6RyNDYuSa+Q6U2EOer+B40/X38",
	"REhf7xKeckiOX5lq8xUU+p9Md088UD35BLTfMF3JRnney8Ct6Ka7ZjwgbA9U6bvPotS9FOKwWROj453p",
	"xcFd7FE8hnvar6aKZ+0TCcWu6febezxG5Dey2t5nlnAtlbKWZX9P2RscFpt42M9kNYMw2Q4jw51jxlkd",
	"lyIyqu7Ify9Kby1pfi/CkR+nih3IhIMsLjRBKSyVpHmIz4VROYZfgdSOCau75ocjk25wNxyzjzrgPhjT",
	"/pNDbzq0btMohe/ifxhS1r1VohA5tjIf36vy9XOxvdz+GwAA//9DQsDGsREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
