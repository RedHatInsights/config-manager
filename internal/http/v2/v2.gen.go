// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTY/bNhD9KwRbwBfHcvNx0a0p2mDRr8WmPSWLYEyObKYUqR2O3BgL//eCIym217Lr",
	"IJsWKHqyyCHfDIdv+Mb32sS6iQEDJ13e62RWWIN8XlOsnMf82VBskNihGMCY2AZ+52we8aZBXerE5MJS",
	"b6caDLs17pkWMXqEkG3ZmXcQzCk7ITDad8Cj0GKONGpzIbnlqjvFMXCAGke3RVqeOkjTJeCUmbBG64Bd",
	"DKNOt9NhKi7eo2G93UqYVZTVjnNutYmhcssnNQRYIumpXiMlF4Mu9VOJr8EAjdOlfjabz+Z6qhvglTgs",
	"Gg+bRYx/yGiJkjOLyZBruIP4LobE1BpOCoJVhNxSSArUtyG5hUc1QKjUOoY8w1F1MbWECtQqJlZVJMUr",
	"VIR3LSZGq/rczLRESJKFK6tL/Qr5useUWAlqZKSkyzf32uWY7lqkjR6uZD/LOad3rSO0umRqcdrTcST9",
	"29u8ODUxpI6UT+fz/GNiYAySCWga74xEVnx4soHa7wi+h7h/OYfJ+/XHfAHPj4AZP3DOfT7N/ZkQjwBf",
	"glU3XQo75OePhfxLZPVDbIPNuC8eL+KrwEgBvHqNtEZS3xNFEmqntq6BNrrUN8jkcI0KwjGtTjJHQIp+",
	"cJrAO3DVwNKF/DooIIKNitWAlT66cRYDu8rlRd0rNVO/rVD9fvOTEt6pHSPVxLva8UQqYxKrKiFPlIGg",
	"FqjahDaXwuC0P0RqPacO0mIFrWe1Bt9iDmaAc0m9mJ9aM7hxSc3Hi2fIyEXFIy71uTqZjm/s4tCPV2Hv",
	"U3xArkPRkMvYcxPaeoGU6dqdYczSBzlm6q8i2xxjLR9fE1a61F8VO0krej0rBjHbPcpCIhlHBj/iZLv/",
	"HL3pl037g+wiuJ3++y/JP1zxr5AVKO8SZ06D9x8LUWQzpjElEmWXWosyB95vlPQKMq8C/nlaVbrdwyV2",
	"F4OJX0a7+QxOfk6ncr7duKA32OdWH8iB1z0XD/DGGXconduj4v3mkxJ1US0ds6e7J1GhZ0fq9kU8ZuX7",
	"OVp58/9TRTYUzH5hHIpmce/s9hLlTA0aVzkzwOzL5GIj0jZxdqJyZ7kTyLOielWJSZDB9wL3VpuWCAO/",
	"1VngREMHkBEHUzHUucEkNBh4F1/KraqEb5ULiRHsObU8IZbZ3U7yvmiD+Wh8/r/p/AQJekjsDi3Jto4H",
	"LXld6gIaVxz+0yrW+e/Vw6J5zbDMbOq2rZibVBZ598zEkKLHWcorZoR2BTwzsb4Y+pqibY0MzuH/PfLt",
	"9q8AAAD//wkr8qC1DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
