// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/cNhD9KwRbYC+KtXXii25N0QZGvwK3PSVGMCuOdielSHk42max0H8vSEn74dUa",
	"NuK0QNGTVxrqzePwDd94q0tfN96hk6CLrQ7lCmtIP9+yr8hi/Nmwb5CFMAWgLH3r5AOZ+CSbBnWhgzC5",
	"pe4yDaXQGg9CC+8tgouxmMwSuPJcnBEEzQeQSegU9jwZO8OGXKDlqt/caT4HNU5+5nl5bn+MNRoCIe8m",
	"UbtsfOUXH7EU3XWJR+XTapJYU116V9HyRQ0Olsg602vkQN7pQl8mAg06aEgX+uXF/GKuM92ArFLCvLGw",
	"WXj/Z3paYqqVwVAyNdJDfOddEG5LCQqcUYzSsgsK1Lcu0MKiGiFUaEkgvhGvek4towK18kFU5VnJChXj",
	"XYtB0KimF8WFTgw5VeHa6EK/QXk7YCauDDUKctDFu62myOmuRd7oseZ6QIpVjjW9a4nR6EK4xWyQ4UT5",
	"u9u4ODTehV6Ml/N5/FN6J+hSJaBpLJWJWf7pxQZquxf2AeLh4RwX79cf4wG8OgEW/CSx9nE32wcongC+",
	"BqNu+hL2yK+eC/kXL+oH3zoTca+ej/G1E2QHVv2GvEZW3zN7TtIObV0Db3Shb1CYcI0K3KmsziongeTD",
	"w3kB78FVA0ty8VZQwAwb5asRK+zSkEEnVFFc1N9OF+r3Fao/bn5SSXdqr0g1s1STzFJnzHxVBZSZKsGp",
	"Bao2oImtMCYdNhFaK6GHNFhBa0WtwbYYyYxwFNTV/NyaMQ0FNZ9unrEij2qelFIf9smQUhdX8939Q04w",
	"Xi5dl03D9Kz0RL/tP31aw30M/p7Wjr0jnc1UnmzY02Ro4DkZGw4nBkmwTj++Zqx0ob/K9+aWD86Wj7a2",
	"v6aTrNKzF7CTRTi8od4N67JhM9nuNHblHDndZv/+bfMP3wpvUBQoS0Gi7sHaXbNGMo0PU26VXD/1o0/v",
	"wNqNSnNEeq8c/nXeefqvx2PtTwqDvPZm8xlC/Zwp5uGZ4xHzw6HYBiJHWQ9S3MObVtyxvXYnHf3Nkwr1",
	"qO46VU9/TsmpXp444BfJGN3xZ2+SL/ynmmxsmMPGODbWfEume4y7hgZLqqgcYQ6tdLFJ9jcjM1Nx+tyb",
	"6IPGe12lUEIGO5jge122zOjkvY4mmHx2BJlIkKVAHYdQxhKd7PmFOM4m+kaRC4JgHnLUM4Ya0+2N8IsO",
	"oc+m5/8H0ydY0H1h92ghfdbroGWrC51DQ/nxf2P5+lJ3t93fAQAA//8lcWg3HA8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
