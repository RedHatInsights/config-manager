// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32/bRgz+Vw7cAL+okdcmL3pbh60I9qvItqc2KM46ymZ3ulN4lFcj0P8+3Enyj1j2",
	"0jUZ9hTrePpIkR/5MfdQ+rrxDp0EKO6BMTTeBUwPl/N5/FN6J+gk/hT8JHljNbn4FMoV1jqdbxqEAoIw",
	"uSV0XZeBwVAyNULeQQGvtVE3eNdiEOgyuJxfPhXyL17UD751JuJePV3E106QnbbqN+Q1svqe2TPEez1I",
	"ytBb9hVZjD8b9g2yUJ86XZa+dfKBzISzDHQptMY908J7i9pFWyyIJe3KU3ZGLWg+aJmETmbPk7YT0ZAL",
	"tFz1BDj253SNk695Xp76PsYaDemYyknULhuP/OIjltIXgFzl022SmNNYxoqWL2rt9BIZMlgjh746L1MA",
	"DTrdEBTw6mJ+MYcMGi2r5DCWfLPw/s/0tMSUq8MCf+ddEG5LCUo7oxilZReUVt+6QAuLaoRQoSXR8US8",
	"6mNqGZVWKx9EVZ6VrFBxz240qulJcQEpQk5ZuDZQwBuUtwNmipV1jYIcoHh3D5GgcNcib2DMOQxIMcsx",
	"p3ctMRoohFvMznD5Njvs45dHXaGbxlKZIss/vdjo2k52x35xDpP36499GyfgrxkrKOCrfDdL8m0Aeby0",
	"a/l/unu518bn78ZLqR3buta8gQJuUJhwjUq74yKerFMCyYeH03TZgatGL8nFHlSaWW+Ur0assHVDBp1Q",
	"RfFSPwsu1O8rVH/c/KRSldWu/mpmqSaZJR7OfFUFlJkqtVMLVG1AE4k3Oh0+IrRWQg9psNKtFbXWtsUY",
	"zAhHQV3NT90Z3VBQ82mqjhl5FFWTS9hn5eASiqv5ttvJCcZW7rpsGqaPCibYvXv18+j9MfgHo/9wUqfa",
	"TPnJhm+aNA1xTtqG4kQjCdbhFJUHHclHEdkNxUSr9OxF28kk7M+Dd8O9bPiYbFuNbTrHmG6z5+jtf9mv",
	"b1CUVpaCREZqa7dtFEEbH6amdlK/1Ck+nWlrNyrpaTpXDv86PYH7t8eE9znEIK+92XwBhb5Ezc9r7yN0",
	"dJ8GQyAHXvdcPMCb5sKhzHRHvfbNZyXqUbw/pmBfp7TSvTpaFZ/FY1wjf/YmTez/iP4jlfcpeyhG+T2Z",
	"7jGKFBosqaJyhNmXn8UmScaMzEzF/WgnPGfF6rpKpoSs7SAc76FsmdHJe4jCkbRpBJlwkCVDHdckxhKd",
	"7OILceFK4RtFLghqc06FTohQdLcTj2ddk56Maf/L1akfxQ9p1Icf0j9AfdZbtlBArhvKD7fzfP0Sutvu",
	"7wAAAP///2quXFAOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
