// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTY/bNhD9KwRbwBfFcvNx0a0p2mDRr8WmPSWLYEyObKYUqR2O3BiG/ntBSlrZa9n1",
	"IpsWKHqypCHfPA7f8NE7qXxVe4eOgyx2Mqg1VpAer8mXxmJ8rMnXSGwwBUAp3zj+YHR8422NspCBybiV",
	"bDMJis0G90JL7y2Ci7GYzBpw6lScEBj1B+BJ6BT2NBk7wca4YFbrbnHH+RxUODnN0+rU+ggr1AbYeDeJ",
	"2mbDJ7/8iIpl2yYepU+jDceaSuVdaVbPKnCwQpKZ3CAF450s5PNEoEYHtZGFfDFfzBcykzXwOiXMawvb",
	"pfd/pLcVplppDIpMzR3Ed94FpkZxEOC0IOSGXBAgvnXBLC2KAUKExjDEL+xFx6khFCDWPrAoPQleoyC8",
	"azAwalF3opjLxJBSFa60LOQb5OseM3ElqJCRgize7aSJnO4apK0cai57pFjlWNO7xhBqWTA1mPUynCh/",
	"exsHh9q70Inx+WIRf5R3jC5VAuraGpWY5Z+ebaGyo7D3EPc357B4v/4YN+DlETDjJ461j6vZnaF4BPga",
	"tLjpStghv3wq5F88ix9843TEffV0jK8cIzmw4i3SBkl8T+QpSTs0VQW0lYW8QSaDGxTgjmV1UjkJJO9f",
	"Tgt4BBc1rIyLp4IAItgKXw5Y4T6N0ejYlCYO6k6nufhtjeL3m59E0p0YFSlm1lSGZ6kzZr4sA/JMKHBi",
	"iaIJqGMrDEn7RYTGcuggNZbQWBYbsA1GMgOcCeLV4tSYIY0JYjHdPENFLmqelFLu90mfUhavFvfnj3GM",
	"8XBp22wapmMlJ/ptnPq4hvsY/AOtHXpH2pupPFm/pslQz3My1m9ODBrGKj18TVjKQn6Vj+aW986WD7Y2",
	"HtNJVundM9jJIuyfUO/6cVm/mJHCbfbvHy7/8CHwBlmAsCZwlDlYe9+bkUztw5Q5JZNP7efTN7B2K9K1",
	"IX0XDv88bTTd7GEXu43BwK+93n6GLj/n0nL+inHBdWFfWz2Rg6x7KR7gTSvu0E3bowb+5lGFuqiZjtXT",
	"7VMyphdHhvdFMkYz/NnrZAP/qSYbGma/MQ59NN8Z3V5ipqFGZUqjBph951xuk9vNjJ6JeNkcPfOsz16V",
	"KZSQwfae916qhggdv5fR85KtDiATCbIUqOKdk1Ch45FfiLfXRF8L4wIj6HMGesI/Y7rR977onfPJ9Pz/",
	"PfQRFvRQ2B1aSNM6HTRkZSFzqE1++Ocr38R/XA+b5i3DKqqpm7ZmrkORx9lz5V3wFuchjpgT6jXwXPnq",
	"Yuhr8rpR6eUc/t8j37Z/BQAA//8WOJYswA8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
