openapi: 3.0.0
info:
  title: Config manager
  description: Config manager service
  version: 0.0.1

servers:
  - url: "https://cloud.redhat.com/api/config-manager/v1"
    description: production
  - url: /api/config-manager/v1
    description: relative path

paths:
  /states:
    get:
      summary: Get archive of state changes for requesting account
      operationId: getStates
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/SortBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateArchives"
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Authentication missing from request
          content: {}
        "500":
          description: Internal Server Error
          content: {}
    post:
      summary: Update and roll out configuration state for requesting account
      operationId: updateStates
      requestBody:
        description: State map that needs to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/State"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountState"
        "400":
          description: Bad Request
          content: {}
        "500":
          description: Internal Server Error
          content: {}

  /states/current:
    get:
      summary: Get the current state for requesting account
      operationId: getCurrentState
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountState"
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Authentication missing from request
          content: {}
        "500":
          description: Internal Server Error
          content: {}

  /states/preview:
    post:
      summary: Get a preview of the playbook built from the provided state map
      operationId: getPlaybookPreview
      requestBody:
        description: State map used to generate a preview playbook
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/State"
        required: true
      responses:
        "200":
          description: OK
          content:
            text/vnd.yaml:
              schema:
                type: string
        "400":
          description: Bad Request
          content: {}

  /states/{id}:
    get:
      summary: Get single state change for requesting account
      operationId: getStateById
      parameters:
        - $ref: "#/components/parameters/StateIDParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateArchive"
        "400":
          description: Bad Request
          content: {}

  /states/{id}/playbook:
    get:
      summary: Get ansible playbook for current state configuration
      operationId: getPlaybookById
      parameters:
        - $ref: "#/components/parameters/StateIDParam"
      responses:
        "200":
          description: OK
          content:
            text/vnd.yaml:
              schema:
                type: string
        "400":
          description: Bad Request
          content: {}

  /manage:
    post:
      summary: Enable or disable automatic state management of remote hosts
      description: |
        Send an HTTP POST method to this path to enable or disable automatic
        management of remote hosts. The request body must be set to either
        `true` or `false`.
      operationId: postManage
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request

components:
  schemas:
    Account:
      type: string
      minLength: 1
      maxLength: 10

    OrgID:
      type: string

    State:
      type: object
      properties:
        insights:
          type: string
          enum: [enabled, disabled]
        compliance_openscap:
          type: string
          enum: [enabled, disabled]
        remediations:
          type: string
          enum: [enabled, disabled]
      required:
        - insights
        - compliance_openscap
        - remediations
      additionalProperties: false

    StateID:
      type: string
      format: uuid

    Label:
      type: string

    Initiator:
      type: string

    Timestamp:
      type: string
      format: date-time

    ApplyState:
      type: boolean

    AccountState:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        state:
          $ref: "#/components/schemas/State"
        id:
          $ref: "#/components/schemas/StateID"
        label:
          $ref: "#/components/schemas/Label"
        apply_state:
          $ref: "#/components/schemas/ApplyState"
        org_id:
          $ref: "#/components/schemas/OrgID"

    StateArchive:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        id:
          $ref: "#/components/schemas/StateID"
        label:
          $ref: "#/components/schemas/Label"
        initiator:
          $ref: "#/components/schemas/Initiator"
        created_at:
          $ref: "#/components/schemas/Timestamp"
        state:
          $ref: "#/components/schemas/State"
        org_id:
          $ref: "#/components/schemas/OrgID"

    StateArchives:
      type: object
      properties:
        total:
          description: A total count of found entries
          type: integer
        count:
          description: A number of entries returned from offset
          type: integer
        limit:
          description: A max number of entries to return
          type: integer
        offset:
          description: A number representing he starting point for retrieving entries
          type: integer
        results:
          description: Query results
          type: array
          items:
            $ref: "#/components/schemas/StateArchive"

  parameters:
    StateIDParam:
      in: path
      name: id
      description: state archive identifier
      required: true
      schema:
        $ref: "#/components/schemas/StateID"

    Filter:
      in: query
      name: filter
      required: false
      schema:
        $ref: "#/components/schemas/Label"

    SortBy:
      in: query
      name: sort_by
      required: false
      schema:
        type: string
        enum:
          - created_at
          - created_at:asc
          - created_at:desc

    Limit:
      in: query
      name: limit
      description: Maximum number of results to return
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 50

    Offset:
      in: query
      name: offset
      description: Indicates the starting position of the query relative to the complete set of items that match the query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
