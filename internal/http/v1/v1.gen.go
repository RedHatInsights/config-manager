// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
