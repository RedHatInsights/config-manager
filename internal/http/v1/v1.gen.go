// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
